{"version":3,"sources":["globalStyles.ts","store/todo/types.ts","store/todo/reducer.ts","store/reducer.ts","store/index.ts","components/TodoItem/styles.ts","components/TodoItem/TodoItem.tsx","store/todo/actions.ts","components/Todos/styles.ts","components/Todos/Todos.tsx","pages/AllTodos.tsx","pages/ActiveTodos.tsx","pages/CompletedTodos.tsx","App.tsx","utils/localStorage.ts","serviceWorker.ts","index.tsx"],"names":["TodoActionType","GlobalStyles","createGlobalStyle","actionHandlerMap","ADD","state","action","newTodo","id","uuidv4","title","payload","completed","REMOVE","filter","todo","TOGGLE","map","CHANGE_TITLE","newTitle","CLEAR_COMPLETED","initialState","rootReducer","combineReducers","type","actionHandler","configureStore","createStore","Wrapper","styled","li","Checkbox","input","StyledTodoItem","Label","span","RemoveButton","button","Input","mapDispatch","removeTodo","toggleTodo","changeTodoTitle","connector","connect","useState","isEditing","setIsEditing","setInput","updateTitle","update","length","autoFocus","value","onChange","e","target","onKeyDown","key","keyCode","onBlur","checked","onDoubleClick","onClick","StyledTodos","div","Header","header","List","ul","Toolbar","Status","Link","NavLink","ClearButton","addTodo","clearCompletedTodo","todos","to","exact","placeholder","App","serializedState","localStorage","getItem","JSON","parse","loadState","store","subscribe","throttle","stringify","setItem","saveState","getState","className","path","component","AllTodos","ActiveTodos","CompletedTodos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41bfe6ac.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    font-family: 'Nunito', sans-serif;\n    font-size: 20px;\n    background: #fafafa;\n    color: #515056;\n\n    * {\n      box-sizing: border-box;\n    }\n  }\n`\n","import { ActionHandler, ActionHandlerMap } from '../types'\n\nexport interface Todo {\n  id: string\n  title: string\n  completed: boolean\n}\n\nexport type TodoState = Todo[]\n\nexport enum TodoActionType {\n  ADD = 'TODO/ADD',\n  REMOVE = 'TODO/REMOVE',\n  TOGGLE = 'TODO/TOGGLE',\n  CHANGE_TITLE = 'TODO/CHANGE_TITLE',\n  CLEAR_COMPLETED = 'TODO/CLEAR_COMPLETED'\n}\n\ninterface AddTodo {\n  type: typeof TodoActionType.ADD\n  payload: string\n}\n\ninterface RemoveTodo {\n  type: typeof TodoActionType.REMOVE\n  payload: Todo\n}\n\ninterface ToggleTodo {\n  type: typeof TodoActionType.TOGGLE\n  payload: Todo\n}\n\ninterface ChangeTodoTitle {\n  type: typeof TodoActionType.CHANGE_TITLE\n  payload: {\n    todo: Todo\n    newTitle: string\n  }\n}\n\ninterface ClearCompletedTodo {\n  type: typeof TodoActionType.CLEAR_COMPLETED\n}\n\nexport type TodoAction = AddTodo | RemoveTodo | ToggleTodo | ChangeTodoTitle | ClearCompletedTodo\n\nexport type TodoActionHandler<T extends TodoAction['type']> = ActionHandler<TodoState, T>\nexport type TodoActionHandlerMap = ActionHandlerMap<TodoState>\n","import { v4 as uuidv4 } from 'uuid'\nimport {\n  TodoState,\n  TodoAction,\n  TodoActionType,\n  Todo,\n  TodoActionHandler,\n  TodoActionHandlerMap,\n} from './types'\n\nconst addTodo: TodoActionHandler<TodoActionType.ADD> = (state, action) => {\n  const newTodo: Todo = {\n    id: uuidv4(),\n    title: action.payload,\n    completed: false,\n  }\n\n  return [...state, newTodo]\n}\n\nconst removeTodo: TodoActionHandler<TodoActionType.REMOVE> = (state, action) => {\n  const newTodos = state.filter((todo) => todo.id !== action.payload.id)\n\n  return newTodos\n}\n\nconst toggleTodo: TodoActionHandler<TodoActionType.TOGGLE> = (state, action) => {\n  const newTodos = state.map((todo) =>\n    todo.id === action.payload.id ? { ...todo, completed: !todo.completed } : todo\n  )\n\n  return newTodos\n}\n\nconst changeTodoTitle: TodoActionHandler<TodoActionType.CHANGE_TITLE> = (state, action) => {\n  const newTodos = state.map((todo) =>\n    todo.id === action.payload.todo.id ? { ...todo, title: action.payload.newTitle } : todo\n  )\n\n  return newTodos\n}\n\nconst clearCompletedTodo: TodoActionHandler<TodoActionType.CLEAR_COMPLETED> = (state, action) => {\n  const newTodos = state.filter((todo) => !todo.completed)\n\n  return newTodos\n}\n\nconst actionHandlerMap: TodoActionHandlerMap = {\n  [TodoActionType.ADD]: addTodo,\n  [TodoActionType.REMOVE]: removeTodo,\n  [TodoActionType.TOGGLE]: toggleTodo,\n  [TodoActionType.CHANGE_TITLE]: changeTodoTitle,\n  [TodoActionType.CLEAR_COMPLETED]: clearCompletedTodo,\n}\n\nconst initialState: TodoState = []\n\nexport const todoReducer = (state: TodoState = initialState, action: TodoAction) => {\n  if (typeof actionHandlerMap[action.type] === 'function') {\n    const actionHandler = actionHandlerMap[action.type] as TodoActionHandler<typeof action.type>\n\n    return actionHandler(state, action)\n  }\n\n  return state\n}\n","import { combineReducers } from 'redux'\nimport { todoReducer } from './todo/reducer'\n\nexport const rootReducer = combineReducers({\n  todo: todoReducer,\n})\n","import { Store, createStore } from 'redux'\nimport { AppState, AppAction } from './types'\nimport { rootReducer } from './reducer'\n\nconst configureStore = (initialState?: AppState): Store<AppState, AppAction> => {\n  const store = createStore(rootReducer, initialState)\n\n  return store\n}\n\nexport default configureStore\n","import styled from 'styled-components'\n\nconst Wrapper = styled.li`\n  font-weight: bold;\n  padding: 12px 0;\n  display: flex;\n  position: relative;\n  padding-right: 30px;\n\n  &:not(:last-child) {\n    border-bottom: 1px solid #edebec;\n  }\n`\n\nconst Checkbox = styled.input`\n  cursor: pointer;\n  border: 1px solid #edebec;\n  width: 24px;\n  height: 24px;\n  margin: 0 10px 0 0;\n  vertical-align: middle;\n  flex-shrink: 0;\n`\n\nconst Label = styled.span`\n  transition: opacity 0.3s ease-in-out;\n\n  ${Checkbox}:checked + & {\n    text-decoration: line-through;\n    opacity: 0.6;\n  }\n`\n\nconst RemoveButton = styled.button`\n  cursor: pointer;\n  font-size: 30px;\n  color: #f64747;\n  background: none;\n  border: 0;\n  display: block;\n  padding: 0;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  position: absolute;\n  right: 0;\n  opacity: 0;\n  transition: opacity 0.3s ease-in-out;\n\n  ${Wrapper}:hover &,\n  ${Checkbox}:focus ~ & {\n    opacity: 0.5;\n  }\n\n  &:hover,\n  &:focus {\n    opacity: 1 !important;\n  }\n`\n\nconst Input = styled.input`\n  font-family: 'Nunito', sans-serif;\n  font-size: 20px;\n  font-weight: bold;\n  color: #515056;\n  border: 1px solid #edebec;\n  outline-color: #b2b4b3;\n  width: 100%;\n  padding: 8px 20px;\n  margin-right: -30px;\n  transition: border-color 0.3s ease-in-out;\n\n  &:hover {\n    border-color: #d8d9da;\n  }\n`\n\nexport const StyledTodoItem = {\n  Wrapper,\n  Checkbox,\n  Label,\n  RemoveButton,\n  Input,\n}\n","import React, { FC, useState, KeyboardEvent } from 'react'\nimport { Todo } from '../../types'\nimport { StyledTodoItem } from './styles'\nimport { toggleTodo, removeTodo, changeTodoTitle } from '../../store/todo/actions'\nimport { connect, ConnectedProps } from 'react-redux'\n\nconst mapDispatch = {\n  removeTodo,\n  toggleTodo,\n  changeTodoTitle,\n}\n\nconst connector = connect(null, mapDispatch)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ninterface Props extends PropsFromRedux {\n  todo: Todo\n}\n\nconst TodoItem: FC<Props> = ({ todo, removeTodo, toggleTodo, changeTodoTitle }) => {\n  const [isEditing, setIsEditing] = useState<boolean>(false)\n  const [input, setInput] = useState<string>(todo.title)\n\n  const handleDoubleClick = () => {\n    setIsEditing(true)\n  }\n\n  const updateTitle = (update = true) => {\n    if (input.length === 0 || !update) {\n      setInput(todo.title)\n      setIsEditing(false)\n    } else {\n      changeTodoTitle(todo, input)\n      setIsEditing(false)\n    }\n  }\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' || e.keyCode === 13) {\n      updateTitle()\n    } else if (e.key === 'Escape' || e.keyCode === 27) {\n      updateTitle(false)\n    }\n  }\n\n  return (\n    <StyledTodoItem.Wrapper>\n      {isEditing ? (\n        <StyledTodoItem.Input\n          type=\"text\"\n          autoFocus={true}\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={handleKeyDown}\n          onBlur={() => updateTitle()}\n        />\n      ) : (\n        <>\n          <StyledTodoItem.Checkbox\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => toggleTodo(todo)}\n          />\n          <StyledTodoItem.Label onDoubleClick={handleDoubleClick}>\n            {todo.title}\n          </StyledTodoItem.Label>\n          <StyledTodoItem.RemoveButton onClick={() => removeTodo(todo)}>\n            ×\n          </StyledTodoItem.RemoveButton>\n        </>\n      )}\n    </StyledTodoItem.Wrapper>\n  )\n}\n\nexport default connector(TodoItem)\n","import { ActionCreator } from 'redux'\nimport { TodoAction, TodoActionType, Todo } from './types'\n\nexport const addTodo: ActionCreator<TodoAction> = (title: string) => ({\n  type: TodoActionType.ADD,\n  payload: title,\n})\n\nexport const removeTodo: ActionCreator<TodoAction> = (todo: Todo) => ({\n  type: TodoActionType.REMOVE,\n  payload: todo,\n})\n\nexport const toggleTodo: ActionCreator<TodoAction> = (todo: Todo) => ({\n  type: TodoActionType.TOGGLE,\n  payload: todo,\n})\n\nexport const changeTodoTitle: ActionCreator<TodoAction> = (todo: Todo, newTitle: string) => ({\n  type: TodoActionType.CHANGE_TITLE,\n  payload: {\n    todo,\n    newTitle,\n  },\n})\n\nexport const clearCompletedTodo: ActionCreator<TodoAction> = () => ({\n  type: TodoActionType.CLEAR_COMPLETED,\n})\n","import styled from 'styled-components'\nimport { NavLink } from 'react-router-dom'\n\nconst Wrapper = styled.div`\n  background-color: #fff;\n  border: 1px solid #edebec;\n  width: 440px;\n  max-width: 100%;\n  padding: 20px;\n  margin: auto;\n`\n\nconst Header = styled.header`\n  text-align: center;\n`\n\nconst Input = styled.input`\n  font-family: 'Nunito', sans-serif;\n  font-size: 20px;\n  font-weight: bold;\n  color: #515056;\n  border: 1px solid #edebec;\n  outline-color: #b2b4b3;\n  width: 100%;\n  padding: 10px 20px;\n  margin-bottom: 20px;\n  transition: border-color 0.3s ease-in-out;\n\n  &:hover {\n    border-color: #d8d9da;\n  }\n`\n\nconst List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`\n\nconst Toolbar = styled.div`\n  font-size: 16px;\n  display: flex;\n  margin-bottom: 15px;\n`\n\nconst Status = styled.span`\n  margin-right: auto;\n`\n\nconst Link = styled(NavLink)`\n  margin-left: 5px;\n  margin-right: 5px;\n  text-decoration: none;\n\n  &.active {\n    text-decoration: underline;\n  }\n`\n\nconst ClearButton = styled.button`\n  color: #f64747;\n  cursor: pointer;\n  font-size: inherit;\n  border: 0;\n  background: none;\n  padding: 0;\n  margin: 0 0 0 auto;\n`\n\nexport const StyledTodos = {\n  Wrapper,\n  Header,\n  Input,\n  List,\n  Toolbar,\n  Status,\n  Link,\n  ClearButton,\n}\n","import React, { FC, useState, KeyboardEvent } from 'react'\nimport TodoItem from '../TodoItem/TodoItem'\nimport { StyledTodos } from './styles'\nimport { addTodo, clearCompletedTodo } from '../../store/todo/actions'\nimport { ConnectedProps, connect } from 'react-redux'\nimport { TodoState } from '../../store/todo/types'\n\nconst mapDispatch = {\n  addTodo,\n  clearCompletedTodo,\n}\n\nconst connector = connect(null, mapDispatch)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ninterface Props extends PropsFromRedux {\n  todos: TodoState\n}\n\nconst Todos: FC<Props> = ({ todos, addTodo, clearCompletedTodo }) => {\n  const [input, setInput] = useState<string>('')\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' || e.keyCode === 13) {\n      if (input.length > 0) {\n        addTodo(input)\n        setInput('')\n      }\n    }\n  }\n\n  return (\n    <StyledTodos.Wrapper>\n      <StyledTodos.Header>\n        <h1>Todo App</h1>\n      </StyledTodos.Header>\n      <StyledTodos.Toolbar>\n        <StyledTodos.Status>{todos.length} Item(s)</StyledTodos.Status>\n        <StyledTodos.Link to=\"/\" exact>\n          All\n        </StyledTodos.Link>\n        <StyledTodos.Link to=\"/active\">Active</StyledTodos.Link>\n        <StyledTodos.Link to=\"/completed\">Completed</StyledTodos.Link>\n        <StyledTodos.ClearButton onClick={clearCompletedTodo}>\n          Clear Completed\n        </StyledTodos.ClearButton>\n      </StyledTodos.Toolbar>\n      <div>\n        <StyledTodos.Input\n          type=\"text\"\n          placeholder=\"What needs to be done?\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={handleKeyDown}\n        />\n      </div>\n      <StyledTodos.List>\n        {todos.map((todo) => (\n          <TodoItem key={todo.id} todo={todo} />\n        ))}\n      </StyledTodos.List>\n    </StyledTodos.Wrapper>\n  )\n}\n\nexport default connector(Todos)\n","import React, { FC } from 'react'\nimport { AppState } from '../store/types'\nimport { connect, ConnectedProps } from 'react-redux'\nimport Todos from '../components/Todos/Todos'\n\nconst mapState = (state: AppState) => ({\n  todos: state.todo,\n})\n\nconst connector = connect(mapState)\n\ntype Props = ConnectedProps<typeof connector>\n\nconst AllTodos: FC<Props> = ({ todos }) => <Todos todos={todos} />\n\nexport default connector(AllTodos)\n","import React, { FC } from 'react'\nimport { AppState } from '../store/types'\nimport { connect, ConnectedProps } from 'react-redux'\nimport Todos from '../components/Todos/Todos'\n\nconst mapState = (state: AppState) => ({\n  todos: state.todo.filter((todo) => todo.completed === false),\n})\n\nconst connector = connect(mapState)\n\ntype Props = ConnectedProps<typeof connector>\n\nconst AllTodos: FC<Props> = ({ todos }) => <Todos todos={todos} />\n\nexport default connector(AllTodos)\n","import React, { FC } from 'react'\nimport { AppState } from '../store/types'\nimport { connect, ConnectedProps } from 'react-redux'\nimport Todos from '../components/Todos/Todos'\n\nconst mapState = (state: AppState) => ({\n  todos: state.todo.filter((todo) => todo.completed === true),\n})\n\nconst connector = connect(mapState)\n\ntype Props = ConnectedProps<typeof connector>\n\nconst AllTodos: FC<Props> = ({ todos }) => <Todos todos={todos} />\n\nexport default connector(AllTodos)\n","import React from 'react'\nimport { GlobalStyles } from './globalStyles'\nimport configureStore from './store'\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport AllTodos from './pages/AllTodos'\nimport ActiveTodos from './pages/ActiveTodos'\nimport CompletedTodos from './pages/CompletedTodos'\nimport { throttle } from 'lodash'\nimport { saveState, loadState } from './utils/localStorage'\nimport { AppState } from './store/types'\n\nfunction App() {\n  const initialState: AppState = loadState()\n  const store = configureStore(initialState)\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState())\n    }, 1000)\n  )\n\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <GlobalStyles />\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={AllTodos} />\n            <Route path=\"/active\" component={ActiveTodos} />\n            <Route path=\"/completed\" component={CompletedTodos} />\n          </Switch>\n        </Router>\n      </Provider>\n    </div>\n  )\n}\n\nexport default App\n","import { AppState } from '../store/types'\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('todo-app-state')\n\n    if (serializedState === null) {\n      return undefined\n    }\n\n    return JSON.parse(serializedState)\n  } catch {\n    return undefined\n  }\n}\n\nexport const saveState = (state: AppState) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('todo-app-state', serializedState)\n  } catch {}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}